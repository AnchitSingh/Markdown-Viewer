import{state as e,formatFileSize as t,formatTime as r}from"./state.js";import{setupEventListeners as a}from"./events.js";import{scrollToBottom as s}from"./script.js";function renderApp(){let t=document.getElementById("app-container");if(!t)return;t.innerHTML="";let r;switch(e.appState){case"loading":r=renderLoading();break;case"welcome":r=renderWelcome();break;case"id_generated":r=renderIdGenerated();break;case"main":r=renderMain();break;case"sync_old_device":r=renderSyncOldDevice();break;case"sync_new_device_start":r=renderSyncNewDeviceStart();break;case"sync_new_device_input":r=renderSyncNewDeviceInput();break;case"init_error":r=renderError(e.initError||"An unknown error occurred.");break;default:r=`<div>Unknown app state: ${e.appState}</div>`}if(t.innerHTML=r,document.body.classList.toggle("dark-mode",e.darkMode),setTimeout(()=>{let t=document.getElementById("dark-icon"),r=document.getElementById("light-icon");t&&r&&(t.style.display=e.darkMode?"none":"block",r.style.display=e.darkMode?"block":"none")},0),feather.replace(),a(),"main"===e.appState&&e.activeChatId){let s=document.getElementById("messages-container");s&&!e.lastAddedMessageId?s.scrollTop=s.scrollHeight:e.lastAddedMessageId}e.lastAddedMessageId&&queueMicrotask(()=>{e.lastAddedMessageId=null}),e.lastAddedMessageId&&"main"===e.appState&&e.activeChatId}function renderLoading(){return`
    <div class="flex flex-col items-center justify-center h-full text-center p-4">
        <i data-feather="loader" class="w-16 h-16 mb-6 animate-spin" style="color: var(--accent);"></i>
        <p class="text-lg" style="color: var(--text-secondary);">Loading Secure Chat...</p>
    </div>
`}function renderError(e){let t=String(e||"Unknown error").substring(0,150);return`
     <div class="flex flex-col items-center justify-center h-full text-center p-4">
         <i data-feather="alert-triangle" class="w-16 h-16 mb-6 text-red-500"></i>
         <h1 class="text-2xl font-semibold mb-3" style="color: var(--text-primary);">Initialization Failed</h1>
         <p class="mb-6 max-w-sm text-red-600 break-words">${t}</p>
         <p class="text-sm" style="color: var(--text-secondary);">Please check your internet connection and browser support for WebRTC, then refresh the page.</p>
         <button onclick="window.location.reload()" class="mt-6 ripple-button btn-effect btn-primary-effect px-6 py-2 rounded-md focus:outline-none" style="background-color: var(--accent); color: var(--bg-primary);">
            Refresh Page
         </button>
     </div>
 `}function renderWelcome(){return`
<div class="flex flex-col items-center justify-center h-full text-center p-4">
  <i data-feather="message-square" class="w-16 h-16 mb-6" style="color: var(--accent);"></i>
  <h1 class="text-3xl font-semibold mb-4" style="color: var(--text-primary);">Minimal Chat</h1>
  <p class="mb-8 max-w-sm" style="color: var(--text-secondary);">
    A simple, secure P2P chat. Get your unique Chat ID to start.
  </p>
  <button
    id="get-started-btn"
    class="ripple-button btn-effect btn-primary-effect px-6 py-2 rounded-md focus:outline-none flex items-center justify-center space-x-2 min-w-[150px]"
    style="background-color: var(--accent); color: var(--bg-primary);"
    ${e.isInitializing?"disabled":""} <!-- Disable while initializing -->
  >
    ${e.isInitializing?'<i data-feather="loader" class="w-5 h-5 animate-spin"></i><span> Generating...</span>':"Get Started"}
  </button>
  <!-- Keep sync button, logic.js handles navigation -->
  <button
    id="sync-from-existing-btn"
    class="btn-effect mt-4 text-sm focus:outline-none"
    style="color: var(--text-secondary);"
    ${e.isInitializing?"disabled":""} <!-- Disable if init happens elsewhere -->
  >
    Sync from Existing Device
  </button>
</div>
`}function renderIdGenerated(){return`
<div class="flex flex-col items-center justify-center h-full text-center p-4">
  <i data-feather="check-circle" class="w-16 h-16 text-green-500 mb-6"></i>
  <h1 class="text-2xl font-semibold mb-3" style="color: var(--text-primary);">Your Unique Chat ID</h1>
  <p class="mb-6 max-w-sm" style="color: var(--text-secondary);">
    This is your permanent address on this device. Copy and share it with friends. Keep it safe!
  </p>
  <div class="flex items-center space-x-3 p-4 rounded-lg border mb-6 max-w-full overflow-x-auto" style="background-color: var(--bg-secondary); border-color: var(--border);">
    <span class="text-lg font-mono break-all" style="color: var(--text-primary);">${e.chatId}</span>
    <button
      id="copy-id-btn"
      title="Copy ID"
      class="ripple-button btn-effect p-2 rounded-md flex-shrink-0 focus:outline-none"
      style="color: var(--text-secondary);"
    >
      <i data-feather="copy" class="w-5 h-5"></i>
    </button>
  </div>
  ${e.copied?'<p class="text-sm text-green-600 mb-4 animate-pulse">Copied to clipboard!</p>':""}
  <button
    id="proceed-to-chat-btn"
    class="haptic-feedback ripple-button btn-effect btn-primary-effect px-6 py-2 rounded-md focus:outline-none"
    style="background-color: var(--accent); color: var(--bg-primary);"
  >
    Proceed to Chat
  </button>
</div>
`}function renderMain(){let a=[...e.chats].sort((e,t)=>(t.timestamp||0)-(e.timestamp||0)),s=e.chats.find(t=>t.id===e.activeChatId),n=e.activeChatId&&e.messages[e.activeChatId]||[],o=e=>{switch(e){case"connected":return'<span class="w-2 h-2 rounded-full bg-green-500 flex-shrink-0" title="Connected"></span>';case"connecting":return'<span class="w-2 h-2 rounded-full bg-yellow-500 flex-shrink-0 animate-pulse" title="Connecting..."></span>';case"error":return'<span class="w-2 h-2 rounded-full bg-red-500 flex-shrink-0" title="Connection Error"></span>';case"timeout":return'<span class="w-2 h-2 rounded-full bg-gray-400 flex-shrink-0" title="Connection Timeout"></span>';default:return'<span class="w-2 h-2 rounded-full bg-gray-300 flex-shrink-0" title="Offline"></span>'}},l="";l=0===e.onlineUsers.length?'<p class="p-4 text-xs text-center" style="color: var(--text-secondary);">No other users currently online.</p>':`
        <ul class="divide-y" style="border-color: var(--border);">
            ${e.onlineUsers.map(e=>`
            <li data-user-id="${e.id}" class="online-user-item p-3 cursor-pointer hover:bg-gray-50 flex items-center space-x-2" style="hover:background-color: var(--bg-secondary);">
                ${o("connected")} <!-- Assume online if in list -->
                <span class="text-sm font-medium truncate text-left-aligned" style="color: var(--text-primary);">${e.userName||e.id}</span>
            </li>`).join("")}
        </ul>`;let i="";i=0===a.length?'<div class="p-6 text-center text-sm" style="color: var(--text-secondary);">Your active chats will appear here.</div>':`
        <ul class="divide-y" style="border-color: var(--border);">
            ${a.map(t=>`
            <li data-chat-id="${t.id}" class="chat-item p-4 cursor-pointer hover:bg-gray-50 ${e.activeChatId===t.id?"bg-gray-100":""}" style="border-color: var(--border); ${e.activeChatId===t.id?"background-color: var(--bg-secondary);":""} hover:background-color: var(--bg-secondary);">
                <div class="flex justify-between items-center">
                  <div class="flex items-center space-x-2 min-w-0">
                      ${o(t.status)}
                      <h3 class="font-semibold truncate text-left-aligned" style="color: var(--text-primary);">${t.name||t.id}</h3>
                  </div>
                  <span class="text-xs flex-shrink-0" style="color: var(--text-secondary);">${r(t.timestamp)}</span>
                </div>
                <div class="flex justify-between items-end mt-1">
                  <p class="text-sm truncate pr-2 text-left-aligned" style="color: var(--text-secondary);">${t.lastMessage||""}</p>
                  ${t.unread&&t.id!==e.activeChatId?'<span class="w-2 h-2 rounded-full flex-shrink-0" style="background-color: var(--accent);"></span>':""}
                </div>
            </li>`).join("")}
        </ul>`;let c="";if(s){let d="connected"===s.status,b=["error","timeout","offline"].includes(s.status)&&e.isOnline,p=a=>{let s=a.file?.name||"Unknown File",n=a.file?.size,o=a.file?.type||"application/octet-stream",l="number"==typeof n?t(n):"N/A",i=a.progress?Math.round(a.progress):0,c="waiting_user_action"===a.status||"interrupted"===a.status,d="waiting_user_action"===a.status,b="complete"===a.status&&a.blobUrl&&"other"===a.sender,p=["receiving_fs","receiving_mem"].includes(a.status),f="paused_by_receiver"===a.status,m=["offering","sending","receiving_fs","receiving_mem","waiting_user_action","requesting_download","interrupted","pausing","resuming","paused_by_receiver"].includes(a.status),y="",v="",x="";switch(a.status){case"initiating":y="Preparing...";break;case"offering":y="Waiting for peer...",v=u(0);break;case"waiting_user_action":y=`Incoming file: ${s}`;break;case"requesting_download":y="Requesting download...";break;case"sending":y=`Sending: ${i}%`,v=u(i);break;case"receiving_fs":case"receiving_mem":y=`Receiving: ${i}%`,v=u(i);break;case"interrupted":case"interrupted":y=`Interrupted at ${i}%.`,v=u(i);break;case"pausing":y="Pausing...",v=u(i);break;case"paused_by_receiver":y=`Paused at ${i}%.`,v=u(i);break;case"paused_by_peer":y=`Paused by sender at ${i}%.`,v=u(i);break;case"resuming":y="Resuming...",v=u(i);break;case"complete":y="me"===a.sender?`Sent: ${s}`:`Received: ${s}`,v=u(100);break;case"failed":y=`Failed: ${a.errorMessage||"Transfer failed"}`,v=u(0);break;case"cancelled":y="Cancelled",v=u(0);break;case"rejected":y="Rejected by peer";break;default:y=`Status: ${a.status}`}if(x="",c){let g="interrupted"===a.status?"Resume":"Download";x+=`<button class="download-btn ripple-button btn-effect file-action-btn btn-primary-effect" style="background-color: var(--accent); color: var(--bg-primary);" data-transfer-id="${a.transferId}"><i data-feather="download" class="w-4 h-4"></i>${g}</button>`}d&&(x+=`<button class="reject-btn ripple-button btn-effect file-action-btn" style="background-color: var(--bg-secondary); color: var(--text-primary);" data-transfer-id="${a.transferId}"><i data-feather="x" class="w-4 h-4"></i>Reject</button>`),b&&(x+=`<button class="save-file-btn ripple-button btn-effect file-action-btn" style="background-color: var(--bg-secondary); color: var(--text-primary);" data-transfer-id="${a.transferId}"><i data-feather="save" class="w-4 h-4"></i>Save File</button>`),m&&(x+=`<button class="cancel-btn ripple-button btn-effect file-action-btn" style="background-color: var(--bg-secondary); color: var(--text-primary);" data-transfer-id="${a.transferId}"><i data-feather="stop-circle" class="w-4 h-4"></i>Cancel</button>`),p&&(x+=`<button class="pause-btn ripple-button btn-effect file-action-btn" style="background-color: var(--bg-secondary); color: var(--text-primary);" data-transfer-id="${a.transferId}"><i data-feather="pause" class="w-4 h-4"></i>Pause</button>`),f&&(x+=`<button class="resume-btn ripple-button btn-effect file-action-btn btn-primary-effect" style="background-color: var(--accent); color: var(--bg-primary);" data-transfer-id="${a.transferId}"><i data-feather="play" class="w-4 h-4"></i>Resume</button>`);let h=o.startsWith("image/")?"image":o.startsWith("video/")?"video":o.startsWith("audio/")?"music":"file";return`
    <div class="message-container flex ${"me"===a.sender?"justify-end":"justify-start"} ${a.id===e.lastAddedMessageId?"newly-added":""}">
        <div class="p-3 rounded-lg max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg break-words shadow-sm w-full ${"me"===a.sender?"bg-black text-white":""}" style="${"me"===a.sender?"background-color: var(--accent); color: var(--bg-primary);":"background-color: var(--bg-primary); color: var(--text-primary); border: 1px solid var(--border);"}">
            <div class="flex items-center space-x-2 mb-1">
                <i data-feather="${h}" class="w-5 h-5 flex-shrink-0"></i>
                <div class="min-w-0 flex-grow">
                    <p class="text-sm font-medium truncate text-left-aligned" style="margin-bottom: 0;">${s}</p>
                    <p class="text-xs opacity-80 text-left-aligned" style="margin-bottom: 0;">${l}</p>
                </div>
            </div>
            <p class="text-xs text-left-aligned opacity-90" style="margin-bottom: ${v||x?"0.25rem":"0"};">${y}</p>
            ${v}
            ${x?`<div class="flex flex-wrap items-center gap-2 mt-2">${x}</div>`:""}
            <span class="text-xs mt-1 block text-right opacity-75" style="color: ${"me"===a.sender?"rgba(255, 255, 255, 0.7)":"var(--text-secondary)"};">${r(a.timestamp)}</span>
        </div>
    </div>`},u=e=>e<0||e>100?"":`
             <div class="progress-bar-container">
                 <div class="progress-bar-inner" style="width: ${e}%;"></div>
             </div>`;c=`
        <div class="p-4 border-b flex items-center space-x-3 flex-shrink-0" style="border-color: var(--border);">
             <button id="back-to-chat-list-btn" title="Back to Chats" class="ripple-button btn-effect p-2 rounded-md md:hidden -ml-2" style="color: var(--text-secondary);"><i data-feather="arrow-left" class="w-5 h-5"></i></button>
             ${o(s.status)}
             <h2 class="text-xl font-semibold truncate text-left-aligned min-w-0 flex-shrink" style="color: var(--text-primary);">${s.name||s.id}</h2>
             <span class="text-xs flex-grow text-right" style="color: var(--text-secondary);">${"connected"===s.status?"Connected":"connecting"===s.status?"Connecting...":"error"===s.status?"Connection Failed":"timeout"===s.status?"Connection Timeout":"Offline"}</span>
        </div>
        <div id="messages-container" class="flex-grow overflow-y-auto p-4 space-y-4" style="background-color: var(--bg-secondary);">
            ${0===n.length?'<p class="text-center text-sm py-4" style="color: var(--text-secondary);">No messages yet. Say hello!</p>':""}
            ${n.map(t=>"file-offer-sent"===t.type||"file-offer-received"===t.type?p(t):`
                        <div class="message-container flex ${"me"===t.sender?"justify-end":"justify-start"} ${t.id===e.lastAddedMessageId?"newly-added":""}">
                            <div class="p-3 rounded-lg max-w-xs sm:max-w-sm md:max-w-md lg:max-w-lg break-words shadow-sm ${"me"===t.sender?"bg-black text-white":""}" style="${"me"===t.sender?"background-color: var(--accent); color: var(--bg-primary);":"background-color: var(--bg-primary); color: var(--text-primary); border: 1px solid var(--border);"}">
                                <p class="text-sm text-left-aligned" style="margin-bottom: 0.25rem;">${String(t.text||"").replace(/\n/g,"<br>")}</p>
                                <span class="text-xs mt-1 block text-right opacity-75" style="color: ${"me"===t.sender?"rgba(255, 255, 255, 0.7)":"var(--text-secondary)"};">${r(t.timestamp)}</span>
                            </div>
                        </div>`).join("")}
            <div id="messages-end" style="height: 1px;"></div> <!-- Scroll target -->
        </div>
        <div class="p-4 border-t flex-shrink-0" style="border-color: var(--border); background-color: var(--bg-primary);">
            ${b?`
                <div class="flex items-center justify-center">
                     <button id="manual-retry-btn" data-peer-id="${s.id}" class="ripple-button btn-effect btn-primary-effect px-4 py-2 rounded-md flex items-center space-x-2" style="background-color: var(--accent); color: var(--bg-primary);"><i data-feather="refresh-cw" class="w-4 h-4"></i><span>Retry Connection</span></button>
                 </div>
            `:`
                <div class="flex items-center space-x-3">
                    <!-- Send File Button -->
                    <button id="send-file-btn" title="Send File" class="ripple-button btn-effect p-2 rounded-md disabled:cursor-not-allowed disabled:opacity-50 focus:outline-none flex-shrink-0" style="color: var(--text-secondary);" ${d?"":"disabled"}>
                        <i data-feather="paperclip" class="w-5 h-5"></i>
                    </button>
                    <!-- Message Input -->
                    <input type="text" id="message-input" placeholder="${d?"Type a message...":"Connection needed to send..."}" value="${e.messageInput}" class="focus-style flex-grow border rounded-md p-2 text-left-aligned disabled:bg-gray-100 disabled:cursor-not-allowed" style="border-color: var(--border); background-color: var(--bg-primary); color: var(--text-primary);" autocomplete="off" ${d?"":'disabled title="Not connected"'}/>
                    <!-- Send Text Button -->
                    <button id="send-message-btn" class="ripple-button btn-effect btn-primary-effect p-2 rounded-md disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none disabled:opacity-50 focus:outline-none flex-shrink-0" style="background-color: var(--accent); color: var(--bg-primary); ${""!==e.messageInput.trim()&&d?"":"opacity: 0.5;"}" ${""!==e.messageInput.trim()&&d?"":"disabled"}>
                      <i data-feather="send" class="w-5 h-5"></i>
                    </button>
                </div>
            `}
        </div>`}else c=`
        <div class="flex-grow flex flex-col items-center justify-center text-center p-4" style="background-color: var(--bg-secondary); color: var(--text-secondary);">
            <i data-feather="message-circle" class="w-12 h-12 mb-4"></i>
            <p>Select an active chat, or click '+' to start a new one.</p>
        </div>`;let f=(e,t,r)=>{if(!e)return"";let a=t.replace("-modal","");return`
        <div id="${t}" class="modal-container fixed inset-0 z-30 flex items-center justify-center p-4 modal-enter modal-enter-active" onclick="if (event.target.id === '${t}') { document.getElementById('app-container').dispatchEvent(new CustomEvent('closeModal', { detail: { modalId: '${a}' }})); }">
            <div class="modal-backdrop absolute inset-0 bg-black opacity-50 backdrop-blur-md"></div>
            <div class="modal-content p-6 rounded-lg shadow-xl w-full max-w-md relative modal-transition" style="box-shadow: var(--shadow);">
                ${r}
            </div>
        </div>
    `},m=`
    <div class="text-left-aligned">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold text-left-aligned" style="color: var(--text-primary);">Start New Chat</h3>
            <button id="close-new-chat-modal-btn" class="ripple-button btn-effect p-1" style="color: var(--text-secondary);"><i data-feather="x" class="w-5 h-5"></i></button>
        </div>

        <!-- Tabs for Online Users / Manual Entry -->
        <div class="mb-4 border-b border-gray-200" style="border-color: var(--border);">
            <nav class="-mb-px flex space-x-6" aria-label="Tabs">
                <button id="tab-online-users" class="tab-button whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm" style="color: var(--accent); border-color: var(--accent);">
                    Online Users
                </button>
                <button id="tab-manual-entry" class="tab-button whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300" style="color: var(--text-secondary); border-color: transparent; hover:color: var(--text-primary); hover:border-color: var(--border);">
                    Enter ID Manually
                </button>
            </nav>
        </div>

        <!-- Online Users Content -->
        <div id="online-users-content" class="tab-content max-h-60 overflow-y-auto mb-4 border rounded-md" style="border-color: var(--border);">
            ${l}
        </div>

        <!-- Manual Entry Content (Initially Hidden) -->
        <div id="manual-entry-content" class="tab-content hidden mb-4">
            <p class="text-sm mb-2 text-left-aligned" style="color: var(--text-secondary);">Enter the Chat ID of the person you want to connect with.</p>
            <input type="text" id="new-chat-friend-id-input" placeholder="Enter friend's Chat ID" value="${e.newChatFriendId}" class="focus-style w-full border rounded-md p-2 text-left-aligned" style="border-color: var(--border); background-color: var(--bg-primary); color: var(--text-primary);" />
        </div>

        <div class="flex justify-end space-x-3 mt-4">
            <button id="cancel-new-chat-btn" class="ripple-button btn-effect px-4 py-2 rounded-md" style="background-color: var(--bg-secondary); color: var(--text-primary);">Cancel</button>
            <!-- Connect button only needed for manual entry, list items handle click directly -->
            <button id="start-chat-btn" class="ripple-button btn-effect btn-primary-effect px-4 py-2 rounded-md hidden disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none" style="background-color: var(--accent); color: var(--bg-primary); ${""===e.newChatFriendId.trim()||e.newChatFriendId.trim()===e.chatId?"opacity: 0.5;":""}" ${""===e.newChatFriendId.trim()||e.newChatFriendId.trim()===e.chatId?"disabled":""}>Connect</button>
        </div>
    </div>`,y=`
    <div class="text-left-aligned">
        <div class="flex justify-between items-center mb-6">
            <h3 class="text-lg font-semibold text-left-aligned" style="color: var(--text-primary);">Settings</h3>
            <button id="close-settings-modal-btn" class="ripple-button btn-effect p-1" style="color: var(--text-secondary);"><i data-feather="x" class="w-5 h-5"></i></button>
        </div>
        <div class="space-y-4">
            <div>
                <h4 class="font-medium mb-1 text-left-aligned" style="color: var(--text-primary);">Your Chat ID</h4>
                <div class="flex items-center space-x-3 p-3 rounded-md border" style="background-color: var(--bg-secondary); border-color: var(--border);">
                    <span class="text-sm font-mono flex-grow break-all text-left-aligned" style="color: var(--text-primary);">${e.chatId||"Not generated yet"}</span>
                    ${e.chatId?'<button id="copy-id-settings-btn" title="Copy ID" class="ripple-button btn-effect p-2 rounded-md flex-shrink-0" style="color: var(--text-secondary);"><i data-feather="copy" class="w-4 h-4"></i></button>':""}
                </div>
                ${e.copied?'<p class="text-xs text-green-600 mt-1 animate-pulse text-left-aligned">Copied!</p>':""}
            </div>
            <!-- Sync Button - Keep for future P2P Sync Implementation -->
            ${e.chatId?'<button id="start-sync-old-device-btn" class="ripple-button btn-effect w-full text-left px-4 py-2 rounded-md flex items-center space-x-2" style="background-color: var(--bg-secondary); color: var(--text-primary);"><i data-feather="refresh-cw" class="w-4 h-4"></i><span>Sync Another Device...</span></button>':""}
        </div>
        <div class="mt-6 flex justify-end">
            <button id="close-settings-btn" class="ripple-button btn-effect px-4 py-2 rounded-md" style="background-color: var(--bg-secondary); color: var(--text-primary);">Close</button>
        </div>
    </div>`,v=e.incomingRequests.map(e=>`
            <div class="p-4 rounded-lg shadow-lg border w-full max-w-sm sm:w-72 notification-container notification-enter-from notification-enter-to notification-leave-from" style="background-color: var(--bg-primary); border-color: var(--border); box-shadow: var(--shadow);">
                <div class="flex items-start space-x-3">
                    <div class="flex-shrink-0 border-2 border-dashed rounded-full w-10 h-10 flex items-center justify-center" style="background-color: var(--bg-secondary); border-color: var(--border);"><i data-feather="user-plus" class="w-5 h-5" style="color: var(--text-secondary);"></i></div>
                    <div class="flex-grow min-w-0">
                        <h4 class="text-sm font-semibold truncate text-left-aligned" style="color: var(--text-primary);">Chat Request</h4>
                        <p class="text-sm truncate text-left-aligned" style="color: var(--text-secondary);">From: ${e.name||e.id}</p>
                        <div class="mt-3 flex space-x-2">
                            <button class="accept-request-btn ripple-button btn-effect btn-primary-effect px-3 py-1 text-xs rounded-md" style="background-color: var(--accent); color: var(--bg-primary);" data-request-id="${e.id}">Accept</button>
                            <button class="ignore-request-btn ripple-button btn-effect px-3 py-1 text-xs rounded-md" style="background-color: var(--bg-secondary); color: var(--text-primary);" data-request-id="${e.id}">Ignore</button>
                        </div>
                    </div>
                    <button class="ignore-request-btn ripple-button btn-effect p-1 flex-shrink-0 -mt-1 -mr-1" style="color: var(--text-secondary);" data-request-id="${e.id}" title="Ignore Request"><i data-feather="x" class="w-4 h-4"></i></button>
                </div>
            </div>`).join("");return`
    <div class="flex h-full relative overflow-hidden">
        <!-- Left Panel: Chat List -->
        <div class="w-full md:w-1/3 lg:w-1/4 border-r flex flex-col flex-shrink-0 ${e.activeChatId&&window.innerWidth<768?"hidden":"flex"}" style="border-color: var(--border); background-color: var(--bg-primary);">
            <!-- Header -->
            <div class="p-4 border-b flex justify-between items-center flex-shrink-0" style="border-color: var(--border);">
                <h2 class="text-xl font-semibold text-left-aligned" style="color: var(--text-primary);">Chats</h2>
                <div class="flex items-center space-x-1">
                    <button id="start-new-chat-btn" title="Start New Chat" class="ripple-button btn-effect p-2 rounded-md" style="color: var(--text-secondary);"><i data-feather="plus-circle" class="w-5 h-5"></i></button>
                    <button id="settings-btn" title="Settings" class="ripple-button btn-effect p-2 rounded-md" style="color: var(--text-secondary);"><i data-feather="settings" class="w-5 h-5"></i></button>
                </div>
            </div>
            <!-- Chat List Area -->
            <div class="overflow-y-auto flex-grow">${i}</div>
        </div>

        <!-- Right Panel: Chat View -->
        <div class="w-full md:w-2/3 lg:w-3/4 flex flex-col flex-grow ${!e.activeChatId&&window.innerWidth<768?"hidden":"flex"}" style="background-color: var(--bg-primary);">
            ${c}
        </div>

        <!-- Modals -->
        ${f(e.isStartingNewChat,"new-chat-modal",m)}
        ${f(e.showSettings,"settings-modal",y)}

         <!-- Notifications Area -->
         <div class="absolute bottom-4 left-4 right-4 sm:left-auto sm:right-4 flex flex-col items-center sm:items-end space-y-3 z-40 pointer-events-none">
             <div class="pointer-events-auto"> <!-- Container for actual notifications to receive clicks -->
                 ${v}
             </div>
        </div>
    </div>
`}function renderSyncOldDevice(){return`
<div class="flex flex-col items-center justify-center h-full text-center p-4 relative">
  <button id="back-to-main-btn" class="ripple-button btn-effect absolute top-4 left-4 p-2 rounded-md flex items-center" style="color: var(--text-secondary);" title="Back to Chat"><i data-feather="arrow-left" class="w-6 h-6"></i></button>
  <h1 class="text-2xl font-semibold mb-3 mt-12" style="color: var(--text-primary);">Sync Device</h1>
  ${e.isSyncing?'<div class="flex flex-col items-center"><i data-feather="loader" class="w-12 h-12 mb-4 animate-spin" style="color: var(--text-primary);"></i><p style="color: var(--text-secondary);">Generating sync code...</p></div>':e.syncCode?`
    <p class="mb-4 max-w-sm" style="color: var(--text-secondary);">Enter this code on your new device. Valid for 2 minutes.</p>
    <div class="p-6 rounded-lg border mb-4" style="background-color: var(--bg-secondary); border-color: var(--border);"><span class="text-4xl font-mono tracking-widest" style="color: var(--text-primary);">${e.syncCode}</span></div>
    <div class="flex items-center space-x-2 mb-6" style="color: var(--text-secondary);"><i data-feather="clock" class="w-5 h-5"></i><span id="countdown-timer">${e.syncCountdown>0?`Expires in ${Math.floor(e.syncCountdown/60)}:${(e.syncCountdown%60).toString().padStart(2,"0")}`:"Code Expired"}</span></div>
    ${e.syncCountdown<=0?'<button id="regenerate-code-btn" class="ripple-button btn-effect btn-primary-effect px-4 py-2 rounded-md" style="background-color: var(--accent); color: var(--bg-primary);">Regenerate Code</button>':'<p class="text-sm" style="color: var(--text-secondary);">Waiting for connection...</p>'}`:'<p style="color: var(--text-secondary);">Failed to generate code. Please try again.</p><button id="regenerate-code-btn" class="ripple-button btn-effect btn-primary-effect mt-4 px-4 py-2 rounded-md" style="background-color: var(--accent); color: var(--bg-primary);">Retry Generation</button>'}
</div>`}function renderSyncNewDeviceStart(){return`
<div class="flex flex-col items-center justify-center h-full text-center p-4 relative">
  <button id="back-to-welcome-btn" class="ripple-button btn-effect absolute top-4 left-4 p-2 rounded-md" style="color: var(--text-secondary);" title="Back to Welcome"><i data-feather="arrow-left" class="w-6 h-6"></i></button>
  <i data-feather="link" class="w-16 h-16 mb-6" style="color: var(--text-primary);"></i>
  <h1 class="text-2xl font-semibold mb-3" style="color: var(--text-primary);">Sync From Existing Device</h1>
  <p class="mb-8 max-w-sm" style="color: var(--text-secondary);">Generate a sync code on your old device (Settings > Sync Device) and enter it here.</p>
  <button id="enter-sync-code-btn" class="ripple-button btn-effect btn-primary-effect px-6 py-2 rounded-md" style="background-color: var(--accent); color: var(--bg-primary);">Enter Sync Code</button>
</div>`}function renderSyncNewDeviceInput(){return`
<div class="flex flex-col items-center justify-center h-full text-center p-4 relative">
  <button id="back-to-sync-start-btn" class="ripple-button btn-effect absolute top-4 left-4 p-2 rounded-md" style="color: var(--text-secondary);" title="Back"><i data-feather="arrow-left" class="w-6 h-6"></i></button>
  <h1 class="text-2xl font-semibold mb-3 mt-12" style="color: var(--text-primary);">Enter Sync Code</h1>
  <p class="mb-6 max-w-sm" style="color: var(--text-secondary);">Enter the temporary code shown on your other device.</p>
  <input type="text" id="sync-code-input" maxLength="6" placeholder="______" class="focus-style w-48 text-center text-3xl font-mono tracking-widest border rounded-md p-3 mb-4" style="border-color: var(--border); background-color: var(--bg-primary); color: var(--text-primary);" autocorrect="off" autocapitalize="off" spellcheck="false" oninput="this.value = this.value.toUpperCase()" />
  ${e.syncErrorMessage?`<div class="flex items-center space-x-2 text-sm text-red-600 mb-4"><i data-feather="alert-circle" class="w-4 h-4"></i><span>${e.syncErrorMessage}</span></div>`:""}
  <button id="verify-sync-code-btn" class="ripple-button btn-effect btn-primary-effect px-6 py-2 rounded-md disabled:cursor-not-allowed disabled:transform-none disabled:shadow-none flex items-center justify-center space-x-2 min-w-[140px]" style="background-color: var(--accent); color: var(--bg-primary); ${e.isSyncing?"opacity: 0.5;":""}" ${e.isSyncing?"disabled":""}>
    ${e.isSyncing?'<i data-feather="loader" class="w-5 h-5 animate-spin"></i><span>Verifying...</span>':"<span>Verify & Sync</span>"}
  </button>
</div>`}export{renderApp};